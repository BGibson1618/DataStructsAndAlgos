In general, accessing an element of an array is O(1), and pushing/popping the last element is O(1). Pushing an element
to the end of an array can be O(n) if the new element causes the array to outgrow its allotted memory. Any action that
causes elements to shift will have O(n), i.e, insertion, deletion, search, etc.

Python arrays are dynamic lists. The are ordered, mutable, and can contain duplicate elements. Lists can contain any
data type, and a single list can contain several different data types.

Python built-in methods:
instantiate - list1 = ['a', 'b', 'c'] or list1 = list(('a', 'b', 'c'))

add elements -  list1.append(x) //adds x to the end
                list1.extend(list2) //appends list2's elements to list1
                list1.insert(i, x) //inserts element x at index i, subsequent elements shifted
                list1 + list2 //concatenates two lists

remove elements -   list1.clear() //removes all elements
                    list1.remove(x) //removes first instance of element with value x
                    list1.pop(i = -1) // removes element at index i and returns value

other - .copy() //returns a shallow copy
        .deepcopy() //returns deep copy
        .count(x) //returns number of elements with value == x
        .index(x) //returns index of first element with value == x
        .reverse() //reverses the list in place, return type is None
        .sort() //compares elements with "<" operator and sorts in ascending order
        .sort(key = <, reverse = False) //KEYWORD ONLY. reverse is a Boolean. if set to True, list will be sorted in
                                        descending order. key can be any function whose return type can be compared with
                                         the "<" operator, e.g., def my_func(e):
                                                                    return len(e)
                                                                 list1.sort(key = my_func)
        min(lst) or max(lst) //returns min/max values. list must be homogenous
        list1 * 2 //doubles the list
        list1[i:j:k] //slices list. i = start (default 0), j = end (default -1), k = step (default 1). if k = -1, the
                        list will print in reverse.




